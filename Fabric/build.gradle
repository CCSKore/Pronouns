import groovy.json.JsonSlurper

plugins {
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

apply plugin: "fabric-loom"

def jsonSlurper = new JsonSlurper()
def config = jsonSlurper.parse(new File(rootDir, 'config.json'))

group = config.group as String
version = config.version as String

loom {
    accessWidenerPath = file("src/main/resources/kore_pronouns.accesswidener")
}

configurations {
    shadow.extendsFrom implementation {
        canBeResolved = true
    }
}

shadowJar { // Doesn't mix well with Fabric, I hate this but it works.
    archiveBaseName.set('Pronouns-Fabric')
    archiveClassifier.set('NoDep')
    archiveVersion.set(version)
    destinationDirectory.set(new File(rootDir, "dev_output"))
    configurations = [project.configurations.shadow]
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name 'YACL Repo'
        url 'https://maven.isxander.dev/releases'
    }
    maven {
        name 'ModMenu Repo'
        url 'https://maven.terraformersmc.com/releases'
    }
    maven {
        name 'Xpple Repo'
        url 'https://maven.xpple.dev/maven2'
    }
}

dependencies {
    minecraft("com.mojang:minecraft:1.20.4") // Minecraft itself
    mappings("net.fabricmc:yarn:1.20.4+build.3:v2") // Yarn mappings
    modCompileOnly("net.fabricmc:fabric-loader:0.15.7") // Fabric Loader
    modCompileOnly("net.fabricmc.fabric-api:fabric-api:0.96.11+1.20.4") // Fabric API
    modImplementation('dev.isxander.yacl:yet-another-config-lib-fabric:3.3.2+1.20.4') // YACL
    modImplementation('com.terraformersmc:modmenu:10.0.0-alpha.3') // Mod Menu
    include modImplementation("dev.xpple:clientarguments:1.7")

    implementation(shadow(project(path: ':API')))
    implementation(shadow("org.spongepowered:configurate-hocon:4.1.2"))
    implementation(shadow('com.google.code.gson:gson:2.10.1'))
    implementation(shadow('org.json:json:20240303'))
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", '1.20.4'
    inputs.property "loader_version", '0.15.7'
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": '1.20.4',
                "loader_version": '0.15.7'
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = 'Pronouns-Fabric'

    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }

    destinationDirectory.set(new File(rootDir, "dev_output"))
}

remapJar {
    archiveBaseName.set('Pronouns-Fabric')
    archiveClassifier.set('')
    archiveVersion.set(version)
    destinationDirectory.set(new File(rootDir, "output"))
    dependsOn shadowJar
    mustRunAfter shadowJar
    inputFile = shadowJar.archivePath
}

remapSourcesJar {
    destinationDirectory.set(new File(rootDir, "dev_output"))
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {
        mavenLocal()
    }
}